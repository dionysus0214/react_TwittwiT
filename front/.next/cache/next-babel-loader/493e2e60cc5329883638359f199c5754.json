{"ast":null,"code":"var _jsxFileName = \"C:\\\\vscode\\\\react_twitter\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  const onToggleLike = useCallback(() => {\n    setLiked(prev => !prev); // falst -> true, true -> false로 바뀜\n  }, []);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // optional chaining\n\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 34\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"red\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    }) : __jsx(HeartOutlined, {\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 19\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 19\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }))],\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 22\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 24\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }, __jsx(Comment, {\n      author: item.User.name,\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 27\n        }\n      }, item.User.nickname[0]),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/vscode/react_twitter/front/components/PostCard.js"],"names":["React","useState","useCallback","PropTypes","useSelector","useDispatch","Button","Card","Popover","Avatar","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","PostImages","CommentForm","PostCardContent","REMOVE_POST_REQUEST","PostCard","post","dispatch","removePostLoading","state","liked","setLiked","onToggleLike","prev","commentFormOpened","setCommentFormOpened","onToggleComment","onRemovePost","type","data","id","user","me","marginBottom","Images","User","nickname","content","Comments","length","item","name","propTypes","shape","number","object","string","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\r\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\r\n\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { REMOVE_POST_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const { removePostLoading } = useSelector((state) => state.post);\r\n\r\n  const [liked, setLiked] = useState(false);\r\n  const onToggleLike = useCallback(() => {\r\n    setLiked((prev) => !prev); // falst -> true, true -> false로 바뀜\r\n  }, []);\r\n  \r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened((prev) => !prev);\r\n  }, []);\r\n\r\n  const onRemovePost = useCallback(() => {\r\n    dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: post.id,\r\n    })\r\n  }, []);\r\n\r\n  const id = useSelector((state) => state.user.me?.id); // optional chaining\r\n\r\n  return (\r\n    <div style={{ marginBottom: 20 }}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" />,\r\n          liked\r\n            ? <HeartTwoTone twoToneColor=\"red\" key=\"heart\" onClick={onToggleLike} />\r\n            : <HeartOutlined onClick={onToggleLike} />,\r\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n          <Popover key=\"more\" content={(\r\n            <Button.Group>\r\n              {id && post.User.id === id\r\n              ? (\r\n                <>\r\n                  <Button>수정</Button>\r\n                  <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                </>\r\n              )\r\n              : <Button>신고</Button>}\r\n            </Button.Group>\r\n          )}>\r\n            <EllipsisOutlined />\r\n          </Popover>\r\n        ]}\r\n        extra={id && <FollowButton post={post} />}\r\n      >\r\n        <Card.Meta\r\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n          title={post.User.nickname}\r\n          description={<PostCardContent postData={post.content} />}\r\n        />        \r\n      </Card>\r\n      {commentFormOpened && (\r\n        <div>\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments.length}개의 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments}\r\n            renderItem={(item) => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.name}\r\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </div>)}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard; "]},"metadata":{},"sourceType":"module"}