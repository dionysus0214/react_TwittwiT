{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nvar initialState = {\n  user: {},\n  post: {}\n}; // (이전상태, 액션) => 다음상태\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          // 바꾸고 싶지 않은 건 object spread\n          isLoggedIn: true,\n          // 바꾸고 싶은 건 직접 써주기\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/vscode/react_twitter/front/reducers/index.js"],"names":["HYDRATE","initialState","user","post","rootReducer","state","action","type","console","log","payload","isLoggedIn","data"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAInBC,EAAAA,IAAI,EAAE;AAJa,CAArB,C,CASA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,OAAL;AACEQ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,6CACKD,KADL,GACeC,MAAM,CAACI,OADtB;;AAGF,SAAK,QAAL;AACE,6CACKL,KADL;AAEEH,QAAAA,IAAI,kCACCG,KAAK,CAACH,IADP;AACa;AACfS,UAAAA,UAAU,EAAE,IAFV;AAEgB;AAClBT,UAAAA,IAAI,EAAEI,MAAM,CAACM;AAHX;AAFN;;AAQF,SAAK,SAAL;AACE,6CACKP,KADL;AAEEH,QAAAA,IAAI,kCACCG,KAAK,CAACH,IADP;AAEFS,UAAAA,UAAU,EAAE,KAFV;AAGFT,UAAAA,IAAI,EAAE;AAHJ;AAFN;;AAQF;AACE,aAAOG,KAAP;AAzBJ;AA2BD,CA5BD;;AA8BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\n\r\nconst initialState = {\r\n  user: {\r\n\r\n  },\r\n  post: {\r\n  \r\n  }\r\n};\r\n\r\n// (이전상태, 액션) => 다음상태\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      console.log('HYDRATE', action);\r\n      return {\r\n        ...state, ...action.payload\r\n      };\r\n    case 'LOG_IN':\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user, // 바꾸고 싶지 않은 건 object spread\r\n          isLoggedIn: true, // 바꾸고 싶은 건 직접 써주기\r\n          user: action.data,\r\n        }\r\n      };\r\n    case 'LOG_OUT':\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          isLoggedIn: false,\r\n          user: null,\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}